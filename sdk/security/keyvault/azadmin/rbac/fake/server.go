//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azadmin/rbac"
	"net/http"
	"net/url"
	"regexp"
)

// Server is a fake server for instances of the rbac.Client type.
type Server struct {
	// CreateOrUpdateRoleDefinition is the fake for method Client.CreateOrUpdateRoleDefinition
	// HTTP status codes to indicate success: http.StatusCreated
	CreateOrUpdateRoleDefinition func(ctx context.Context, scope string, roleDefinitionName string, parameters rbac.RoleDefinitionCreateParameters, options *rbac.CreateOrUpdateRoleDefinitionOptions) (resp azfake.Responder[rbac.CreateOrUpdateRoleDefinitionResponse], errResp azfake.ErrorResponder)

	// CreateRoleAssignment is the fake for method Client.CreateRoleAssignment
	// HTTP status codes to indicate success: http.StatusCreated
	CreateRoleAssignment func(ctx context.Context, scope string, roleAssignmentName string, parameters rbac.RoleAssignmentCreateParameters, options *rbac.CreateRoleAssignmentOptions) (resp azfake.Responder[rbac.CreateRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// DeleteRoleAssignment is the fake for method Client.DeleteRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	DeleteRoleAssignment func(ctx context.Context, scope string, roleAssignmentName string, options *rbac.DeleteRoleAssignmentOptions) (resp azfake.Responder[rbac.DeleteRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// DeleteRoleDefinition is the fake for method Client.DeleteRoleDefinition
	// HTTP status codes to indicate success: http.StatusOK
	DeleteRoleDefinition func(ctx context.Context, scope string, roleDefinitionName string, options *rbac.DeleteRoleDefinitionOptions) (resp azfake.Responder[rbac.DeleteRoleDefinitionResponse], errResp azfake.ErrorResponder)

	// GetRoleAssignment is the fake for method Client.GetRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	GetRoleAssignment func(ctx context.Context, scope string, roleAssignmentName string, options *rbac.GetRoleAssignmentOptions) (resp azfake.Responder[rbac.GetRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// GetRoleDefinition is the fake for method Client.GetRoleDefinition
	// HTTP status codes to indicate success: http.StatusOK
	GetRoleDefinition func(ctx context.Context, scope string, roleDefinitionName string, options *rbac.GetRoleDefinitionOptions) (resp azfake.Responder[rbac.GetRoleDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListRoleAssignmentsPager is the fake for method Client.NewListRoleAssignmentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListRoleAssignmentsPager func(scope string, options *rbac.ListRoleAssignmentsOptions) (resp azfake.PagerResponder[rbac.ListRoleAssignmentsResponse])

	// NewListRoleDefinitionsPager is the fake for method Client.NewListRoleDefinitionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListRoleDefinitionsPager func(scope string, options *rbac.ListRoleDefinitionsOptions) (resp azfake.PagerResponder[rbac.ListRoleDefinitionsResponse])
}

// NewServerTransport creates a new instance of ServerTransport with the provided implementation.
// The returned ServerTransport instance is connected to an instance of rbac.Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerTransport(srv *Server) *ServerTransport {
	return &ServerTransport{
		srv:                         srv,
		newListRoleAssignmentsPager: newTracker[azfake.PagerResponder[rbac.ListRoleAssignmentsResponse]](),
		newListRoleDefinitionsPager: newTracker[azfake.PagerResponder[rbac.ListRoleDefinitionsResponse]](),
	}
}

// ServerTransport connects instances of rbac.Client to instances of Server.
// Don't use this type directly, use NewServerTransport instead.
type ServerTransport struct {
	srv                         *Server
	newListRoleAssignmentsPager *tracker[azfake.PagerResponder[rbac.ListRoleAssignmentsResponse]]
	newListRoleDefinitionsPager *tracker[azfake.PagerResponder[rbac.ListRoleDefinitionsResponse]]
}

// Do implements the policy.Transporter interface for ServerTransport.
func (s *ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "Client.CreateOrUpdateRoleDefinition":
		resp, err = s.dispatchCreateOrUpdateRoleDefinition(req)
	case "Client.CreateRoleAssignment":
		resp, err = s.dispatchCreateRoleAssignment(req)
	case "Client.DeleteRoleAssignment":
		resp, err = s.dispatchDeleteRoleAssignment(req)
	case "Client.DeleteRoleDefinition":
		resp, err = s.dispatchDeleteRoleDefinition(req)
	case "Client.GetRoleAssignment":
		resp, err = s.dispatchGetRoleAssignment(req)
	case "Client.GetRoleDefinition":
		resp, err = s.dispatchGetRoleDefinition(req)
	case "Client.NewListRoleAssignmentsPager":
		resp, err = s.dispatchNewListRoleAssignmentsPager(req)
	case "Client.NewListRoleDefinitionsPager":
		resp, err = s.dispatchNewListRoleDefinitionsPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *ServerTransport) dispatchCreateOrUpdateRoleDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.CreateOrUpdateRoleDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdateRoleDefinition not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleDefinitions/(?P<roleDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[rbac.RoleDefinitionCreateParameters](req)
	if err != nil {
		return nil, err
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	roleDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.CreateOrUpdateRoleDefinition(req.Context(), scopeParam, roleDefinitionNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchCreateRoleAssignment(req *http.Request) (*http.Response, error) {
	if s.srv.CreateRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateRoleAssignment not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleAssignments/(?P<roleAssignmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[rbac.RoleAssignmentCreateParameters](req)
	if err != nil {
		return nil, err
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	roleAssignmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleAssignmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.CreateRoleAssignment(req.Context(), scopeParam, roleAssignmentNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchDeleteRoleAssignment(req *http.Request) (*http.Response, error) {
	if s.srv.DeleteRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteRoleAssignment not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleAssignments/(?P<roleAssignmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	roleAssignmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleAssignmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.DeleteRoleAssignment(req.Context(), scopeParam, roleAssignmentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchDeleteRoleDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.DeleteRoleDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteRoleDefinition not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleDefinitions/(?P<roleDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	roleDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.DeleteRoleDefinition(req.Context(), scopeParam, roleDefinitionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchGetRoleAssignment(req *http.Request) (*http.Response, error) {
	if s.srv.GetRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetRoleAssignment not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleAssignments/(?P<roleAssignmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	roleAssignmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleAssignmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetRoleAssignment(req.Context(), scopeParam, roleAssignmentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchGetRoleDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.GetRoleDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetRoleDefinition not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleDefinitions/(?P<roleDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	roleDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetRoleDefinition(req.Context(), scopeParam, roleDefinitionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchNewListRoleAssignmentsPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListRoleAssignmentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListRoleAssignmentsPager not implemented")}
	}
	newListRoleAssignmentsPager := s.newListRoleAssignmentsPager.get(req)
	if newListRoleAssignmentsPager == nil {
		const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleAssignments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		var options *rbac.ListRoleAssignmentsOptions
		if filterParam != nil {
			options = &rbac.ListRoleAssignmentsOptions{
				Filter: filterParam,
			}
		}
		resp := s.srv.NewListRoleAssignmentsPager(scopeParam, options)
		newListRoleAssignmentsPager = &resp
		s.newListRoleAssignmentsPager.add(req, newListRoleAssignmentsPager)
		server.PagerResponderInjectNextLinks(newListRoleAssignmentsPager, req, func(page *rbac.ListRoleAssignmentsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListRoleAssignmentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListRoleAssignmentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListRoleAssignmentsPager) {
		s.newListRoleAssignmentsPager.remove(req)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchNewListRoleDefinitionsPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListRoleDefinitionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListRoleDefinitionsPager not implemented")}
	}
	newListRoleDefinitionsPager := s.newListRoleDefinitionsPager.get(req)
	if newListRoleDefinitionsPager == nil {
		const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Authorization/roleDefinitions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		var options *rbac.ListRoleDefinitionsOptions
		if filterParam != nil {
			options = &rbac.ListRoleDefinitionsOptions{
				Filter: filterParam,
			}
		}
		resp := s.srv.NewListRoleDefinitionsPager(scopeParam, options)
		newListRoleDefinitionsPager = &resp
		s.newListRoleDefinitionsPager.add(req, newListRoleDefinitionsPager)
		server.PagerResponderInjectNextLinks(newListRoleDefinitionsPager, req, func(page *rbac.ListRoleDefinitionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListRoleDefinitionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListRoleDefinitionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListRoleDefinitionsPager) {
		s.newListRoleDefinitionsPager.remove(req)
	}
	return resp, nil
}
