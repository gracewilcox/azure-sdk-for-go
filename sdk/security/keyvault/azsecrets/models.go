// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azsecrets

import "time"

// BackupSecretResult - The backup secret result, containing the backup blob.
type BackupSecretResult struct {
	// The backup blob containing the backed up secret.
	Value []byte
}

// DeletedSecretBundle - A Deleted Secret consisting of its previous id, attributes and its tags, as
// well as information on when it will be purged.
type DeletedSecretBundle struct {
	// The secret management attributes.
	Attributes *SecretAttributes

	// The content type of the secret.
	ContentType *string

	// The time when the secret was deleted, in UTC
	DeletedDate *time.Time

	// The secret id.
	ID *string

	// If this is a secret backing a KV certificate, then this field specifies the
	// corresponding key backing the KV certificate.
	Kid *string

	// True if the secret's lifetime is managed by key vault. If this is a secret
	// backing a certificate, then managed will be true.
	Managed *bool

	// The url of the recovery object, used to identify and recover the deleted secret.
	RecoveryID *string

	// The time when the secret is scheduled to be purged, in UTC
	ScheduledPurgeDate *time.Time

	// Application specific metadata in the form of key-value pairs.
	Tags map[string]*string

	// The secret value.
	Value *string
}

// DeletedSecretItem - The deleted secret item containing metadata about the deleted secret.
type DeletedSecretItem struct {
	// REQUIRED; Secret identifier.
	ID *string

	// The secret management attributes.
	Attributes *SecretAttributes

	// Type of the secret value such as a password.
	ContentType *string

	// The time when the secret was deleted, in UTC
	DeletedDate *time.Time

	// True if the secret's lifetime is managed by key vault. If this is a key backing
	// a certificate, then managed will be true.
	Managed *bool

	// The url of the recovery object, used to identify and recover the deleted secret.
	RecoveryID *string

	// The time when the secret is scheduled to be purged, in UTC
	ScheduledPurgeDate *time.Time

	// Application specific metadata in the form of key-value pairs.
	Tags map[string]*string
}

// PagedDeletedSecretItem - Paged collection of DeletedSecretItem items
type PagedDeletedSecretItem struct {
	// REQUIRED; The DeletedSecretItem items on this page
	Value []DeletedSecretItem

	// The link to the next page of items
	NextLink *string
}

// PagedSecretItem - Paged collection of SecretItem items
type PagedSecretItem struct {
	// REQUIRED; The SecretItem items on this page
	Value []SecretItem

	// The link to the next page of items
	NextLink *string
}

// SecretAttributes - The secret management attributes.
type SecretAttributes struct {
	// Creation time in UTC.
	Created *time.Time

	// Determines whether the object is enabled.
	Enabled *bool

	// Expiry date in UTC.
	Expires *time.Time

	// Not before date in UTC.
	NotBefore *time.Time

	// softDelete data retention days. Value should be >=7 and <=90 when softDelete
	// enabled, otherwise 0.
	RecoverableDays *int32

	// Reflects the deletion recovery level currently in effect for secrets in the
	// current vault. If it contains 'Purgeable', the secret can be permanently
	// deleted by a privileged user; otherwise, only the system can purge the secret,
	// at the end of the retention interval.
	RecoveryLevel *DeletionRecoveryLevel

	// Last updated time in UTC.
	Updated *time.Time
}

// SecretBundle - A secret consisting of a value, id and its attributes.
type SecretBundle struct {
	// The secret management attributes.
	Attributes *SecretAttributes

	// The content type of the secret.
	ContentType *string

	// The secret id.
	ID *string

	// If this is a secret backing a KV certificate, then this field specifies the
	// corresponding key backing the KV certificate.
	Kid *string

	// True if the secret's lifetime is managed by key vault. If this is a secret
	// backing a certificate, then managed will be true.
	Managed *bool

	// Application specific metadata in the form of key-value pairs.
	Tags map[string]*string

	// The secret value.
	Value *string
}

// SecretItem - The secret item containing secret metadata.
type SecretItem struct {
	// REQUIRED; Secret identifier.
	ID *string

	// The secret management attributes.
	Attributes *SecretAttributes

	// Type of the secret value such as a password.
	ContentType *string

	// True if the secret's lifetime is managed by key vault. If this is a key backing
	// a certificate, then managed will be true.
	Managed *bool

	// Application specific metadata in the form of key-value pairs.
	Tags map[string]*string
}

// SecretListResult - The secret list result.
type SecretListResult struct {
	// REQUIRED; The SecretItem items on this page
	Value []SecretItem

	// The link to the next page of items
	NextLink *string
}

// SecretRestoreParameters - The secret restore parameters.
type SecretRestoreParameters struct {
	// REQUIRED; The backup blob associated with a secret bundle.
	SecretBundleBackup []byte
}

// SecretSetParameters - The secret set parameters.
type SecretSetParameters struct {
	// REQUIRED; The value of the secret.
	Value *string

	// Type of the secret value such as a password.
	ContentType *string

	// The secret management attributes.
	SecretAttributes *SecretAttributes

	// Application specific metadata in the form of key-value pairs.
	Tags map[string]*string
}

// SecretUpdateParameters - The secret update parameters.
type SecretUpdateParameters struct {
	// Type of the secret value such as a password.
	ContentType *string

	// The secret management attributes.
	SecretAttributes *SecretAttributes

	// Application specific metadata in the form of key-value pairs.
	Tags map[string]*string
}
